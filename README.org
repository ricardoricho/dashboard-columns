#+TITLE: Dashboard columns

A hack to show dashboard items in columns

* Installation

Clone repository from source:
#+begin_src
  git clone http://github.com/ricardoricho/dashboard-columns
#+end_src

** Use-package

Add after dashboard
#+begin_src emacs-lisp
  (use-package dashboard-columns
    :load-path "Path to dashboard-columns source"
    :after dashboard
    :config
    (dashboard-columns-activate '((bookmarks 15 . 3)
                                  (projects 15 . 3)
                                  (agenda . 20))))
#+end_src

** Manual

Add path to ~load-path~
#+begin_src emacs-lisp
  (add-to-list <dashboard-colums-path> 'load-path)
#+end_src

Activate ~dashboard-columns~ after loading dashboard
#+begin_src emacs-lisp
  (eval-after-load 'dashboard
    (require 'dashboard-columns)
    (dashboard-columns-activate '((bookmarks 15 . 3)
                                  (agenda . 20)
                                  (recents 15 . 3))))
#+end_src

** Straight

After setting ~(setq straight-use-package-by-default t)~ you can use ~:host
sourcehut~ with ~:repo "richo/dashboard-columns"~ or use ~:host github~ with ~:repo
"ricardoricho/dashboard-columns"~

#+begin_src emacs-lisp
  (use-package dashboard-columns
    :straight (dashboard-columns :host sourcehut :repo "richo/dashboard-columns")
    :after dashboard
    :config
    (dashboard-columns-activate '((bookmarks 15 . 3)
                                  (projects 15 . 3)
                                  (agenda . 20))))
#+end_src

* Usage

Activate columns with a list of dashboard items, size and number of columns, for example:

#+begin_src emacs-lisp
  (dashboard-columns-activate '((bookmarks 15 . 3)
                                (projects 15 . 3)
                                (agenda . 20)))
#+end_src

That would split a list of 15 bookmarks in 3 columns, 15 projects in 3 columns
and 20 agenda items in 2 (default) columns.

To restore original dashboard, columns hack could be deactivated.
#+begin_src emacs-lisp
  (dashboard-columns-deactivate)
#+end_src

* Icons

Custom variable ~dashboard-icon-provider~ could take values of ~'all-the-icons~,
~'nerd-icons~ or ~nil~ to enable or disable icons using the
corresponding library. Note that icon package needs to be required before
dashboard-columns, using ~(require 'nerd-icons)~ or by setting ~:demand t~ in
~use-package~ delcaration: ~(use-package nerd-icons :demand t)~.
